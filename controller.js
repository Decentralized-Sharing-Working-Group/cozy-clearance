// Generated by CoffeeScript 1.7.1
var Contact, CozyAdapter, americano, async, clearance, e,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

clearance = require('./index');

async = require('async');

americano = require('americano-cozy');

Contact = americano.getModel('Contact', {
  fn: String,
  n: String,
  _attachments: function(x) {
    return x;
  },
  datapoints: function(x) {
    return x;
  }
});

CozyAdapter = (function() {
  try {
    return require('americano-cozy/node_modules/jugglingdb-cozy-adapter');
  } catch (_error) {
    e = _error;
    return require('jugglingdb-cozy-adapter');
  }
})();

module.exports = function(options) {
  var mailSubject, mailTemplate, out, sendMail;
  out = {};
  mailSubject = options.mailSubject;
  mailTemplate = options.mailTemplate;
  sendMail = function(doc, key, cb) {
    var rule;
    rule = doc.clearance.filter(function(rule) {
      return rule.key === key;
    })[0];
    return doc.getPublicURL((function(_this) {
      return function(err, url) {
        var mailOptions;
        if (err) {
          return cb(err);
        }
        url += '?key=' + rule.key;
        mailOptions = {
          to: rule.email,
          subject: mailSubject({
            doc: doc,
            url: url
          }),
          content: url,
          html: mailTemplate({
            doc: doc,
            url: url
          })
        };
        return CozyAdapter.sendMailFromUser(mailOptions, cb);
      };
    })(this));
  };
  out.change = function(req, res, next) {
    clearance = req.body.clearance;
    return req.doc.updateAttributes({
      clearance: clearance
    }, function(err) {
      if (err) {
        return next(err);
      }
      return res.send(req.doc);
    });
  };
  out.sendAll = function(req, res, next) {
    var sent, toSend;
    toSend = req.body;
    sent = [];
    return async.each(toSend, function(rule, cb) {
      sent.push(rule.key);
      return sendMail(req.doc, rule.key, cb);
    }, function(err) {
      var newClearance;
      if (err) {
        return next(err);
      }
      newClearance = req.doc.clearance.map(function(rule) {
        var _ref;
        if (_ref = rule.key, __indexOf.call(sent, _ref) >= 0) {
          rule.sent = true;
        }
        return rule;
      });
      return req.doc.updateAttributes({
        clearance: newClearance
      }, function(err) {
        if (err) {
          return next(err);
        }
        return res.send(req.doc);
      });
    });
  };
  out.contactList = function(req, res, next) {
    return Contact.request('all', function(err, contacts) {
      if (err) {
        return next(err);
      }
      return res.send(contacts.map(function(contact) {
        var emails, name, simple, _ref, _ref1, _ref2;
        name = contact.fn || ((_ref = contact.n) != null ? _ref.split(';').slice(0, 2).join(' ') : void 0);
        emails = (_ref1 = contact.datapoints) != null ? _ref1.filter(function(dp) {
          return dp.name === 'email';
        }) : void 0;
        emails = emails.map(function(dp) {
          return dp.value;
        });
        return simple = {
          id: contact.id,
          hasPicture: ((_ref2 = contact._attachments) != null ? _ref2.picture : void 0) != null,
          name: name || '?',
          emails: emails || []
        };
      }));
    });
  };
  out.contactPicture = function(req, res, next) {
    return Contact.find(req.params.contactid, function(err, contact) {
      var stream, _ref;
      if (err) {
        return next(err);
      }
      if (!((_ref = contact._attachments) != null ? _ref.picture : void 0)) {
        err = new Error('not found');
        err.status = 404;
        return next(err);
      }
      stream = contact.getFile('picture', function(err) {
        if (err) {
          return res.error(500, "File fetching failed.", err);
        }
      });
      return stream.pipe(res);
    });
  };
  return out;
};
